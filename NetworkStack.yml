AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Network Template: Sample template that creates network stack for Route53 Rangers.

# This template creates:
#   VPC
#   GATEWAYS & EIP section
#   SUBNETS
#   ROUTING
#   SECURITY GROUPS
#   OUTPUTS

Resources:
############################################################
#                         VPC
############################################################
  route53rangersVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: route53rangersVpc

############################################################
#                   GATEWAYS & EIP
############################################################

  ## Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref route53rangersVpc
      InternetGatewayId: !Ref InternetGateway

  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Elastic IP For NAT Gateway 1
  EIP1:
    Type: 'AWS::EC2::EIP'
    DependsOn: route53rangersVpc
    Properties:
      Domain: vpc

  # Elastic IP For NAT Gateway 2
  EIP2:
    Type: 'AWS::EC2::EIP'
    DependsOn: route53rangersVpc
    Properties:
      Domain: vpc

############################################################
#                       SUBNETS
############################################################

  # Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref route53rangersVpc
      CidrBlock: 10.0.144.0/20
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
  
  # Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref route53rangersVpc
      CidrBlock: 10.0.160.0/20
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PrivateSubnet1  

# Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref route53rangersVpc
      CidrBlock: 10.0.176.0/20
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref route53rangersVpc
      CidrBlock: 10.0.192.0/20
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PrivateSubnet2  

############################################################
#                      ROUTING
############################################################

  ## PUBLIC ROUTING ##
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref route53rangersVpc
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # Associate Public Subnets "PublicSubnet1" with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  # Associate Public Subnets "PublicSubnet2" with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  ## PRIVATE ROUTING ##
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref route53rangersVpc
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref route53rangersVpc
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # Associate Private Subnets "PrivateSubnet1" with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  
  # Associate Private Subnets "PrivateSubnet2" with Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

############################################################
#                   SECURITY GROUPS
############################################################

  # Security Group for to allow SSH and HTTP traffic for EC2s
  WebAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP traffic for EC2s
      VpcId: !Ref route53rangersVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: webappSG


  # Security Group for to allow HTTP traffic for Application Load Balancer
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic for target group contains EC2s
      VpcId: !Ref route53rangersVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access to the bastion host'
      VpcId: !Ref route53rangersVpc
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'  # Restrict this to your IP range for better security
      Tags:
        - Key: Name
          Value: BastionSG

############################################################
#                     OUTPUTS
############################################################

Outputs:
  
  PublicSubnet1:
    Description: The subnet ID to use for public web server 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1'
  
  PublicSubnet2:
    Description: The subnet ID to use for public web server 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2'
  
  PrivateSubnet1:
    Description: The subnet ID to use for private web server 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'

  PrivateSubnet2:
    Description: The subnet ID to use for private web server 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'

  VPC:
    Description: VPC ID
    Value: !Ref route53rangersVpc
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  ALBSG:
    Description: Security Group ID for Application Load Balancer
    Value: !Ref ALBSG
    Export:
      Name: !Sub '${AWS::StackName}-ALBSG'

  WebAppSG:
    Description: Security Group ID for EC2s
    Value: !Ref WebAppSG    
    Export:
      Name: !Sub '${AWS::StackName}-WebAppSG'

  BastionSG:
    Description: Security Group ID for Bastion Host
    Value: !Ref BastionSG
    Export:
      Name: !Sub '${AWS::StackName}-BastionSG'